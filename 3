#include <Adafruit_Fingerprint.h>
#include <WiFi.h>
#include <base64.h> 
#include <PubSubClient.h>
#define WIFI_SSID "MyHaven"
#define WIFI_PASSWORD "myhaven1777"
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#define API_KEY "AIzaSyATRlhq87HHuKdWpkPlBgqANWfO4ErKZpw"
#define DATABASE_URL "https://iot-assignment-3fb92.firebaseio.com/"
FirebaseData fdbo;
FirebaseAuth auth;
FirebaseConfig config;
unsigned long sendDataPrevMillis = 0;
bool signupOK = false;
const char* mqtt_server = "192.168.1.37";
WiFiClient espClient;
PubSubClient client(espClient);
HardwareSerial mySerial(2);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
uint8_t id = 0;
uint8_t downloadTemplate[512];
const char* mqtt_topic = "fingerprint/poweronoff";
const char* mqtt_topic2 = "fingerprint/username";
String username = "";
String mqtt_command = "";
bool serialUpdate = 0;
bool update_power = 0;
bool command_PowerOnOff;
bool command_RegisterFinger = 0;
bool waitingForFingerprint = 0;
bool se = 0;



void setup(){
  Serial.begin(115200);
  mySerial.begin(57600, SERIAL_8N1, 16, 17);
  finger.begin(57600);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.println("Connecting to WiFi...");
  }
  Serial.println("\nWiFi connected");
  setup_mqtt();
  finger.emptyDatabase();
  finger.LEDcontrol(true);
  initializeFirebase();
   if (Firebase.ready() && signupOK) {
    Firebase.RTDB.setString(&fdbo, "/fingerprint/Power", "on");
  }
}

void initializeFirebase(){
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if(Firebase.signUp(&config, &auth, "", "")){
    Serial.println("OK");
    signupOK = true;
  }else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop(){
  if (waitingForFingerprint == 1) {
    enrollFingerprint();
    waitingForFingerprint = 0;
  }

  if (se == 1) {
    searchFingerprint();
    se = 0;
  }

  if(update_power == 1){
    runFingerPrint();
    update_power = 0;
  }

  if (waitingForFingerprint == 0  && command_PowerOnOff == 1) {
    passiveFingerprintScan();
  }
  
  client.loop();
}

void callback(char* topic, byte* message, unsigned int length){
  mqtt_command = "";
  serialUpdate = 0;
  for(int i = 0; i < length; i++){
    mqtt_command += (char)message[i];
  }

  if (String(topic) == "fingerprint/username") {
  username = mqtt_command;
  Serial.print("Username received: ");
  Serial.println(username);
  serialUpdate = 1;
  waitingForFingerprint = 1;
  }


  if (String(topic) == "fingerprint/poweronoff") {
    if (mqtt_command == "on") {
      update_power = 1;
      command_PowerOnOff = 1;
    } else if (mqtt_command == "off") {
      update_power = 1;
      command_PowerOnOff = 0;
    }
  }

  if(mqtt_command == "reg"){
    
  }

  if(mqtt_command == "se"){
    serialUpdate = 1;
    se = 1;
  }

  if(serialUpdate == 1){
    Serial.print("MQTT command received: ");
    Serial.println(mqtt_command);
  }
}

void setup_mqtt(){
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  reconnect();
  client.subscribe(mqtt_topic);
  client.subscribe(mqtt_topic2);
  Serial.println("MQTT setup done");
}

void reconnect(){
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("", NULL, NULL)) {
      Serial.println("MQTT connected.");
      client.subscribe("testqwe/topic");
    } else {
      Serial.print("MQTT failed, rc=");
      Serial.print(client.state());
      Serial.println(" trying again in 2 seconds...");
      delay(2000);
    }
  }
}

void runFingerPrint(){
  if(command_PowerOnOff == 0){
    finger.LEDcontrol(false);
    Firebase.RTDB.setString(&fdbo, "/fingerprint/Power", "off");
  }else if(command_PowerOnOff == 1){
    finger.LEDcontrol(true);
    Firebase.RTDB.setString(&fdbo, "/fingerprint/Power", "on");
  }
}

void enrollFingerprint() {
    int p = -1;
  readIDfromFirebase();
  Serial.print("Enrolling ID #"); Serial.println(id);

  Serial.println("Place your finger on the sensor...");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) {
      delay(100);
      continue;
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
      continue;
    } else if (p != FINGERPRINT_OK) {
      Serial.println("Unknown error");
      continue;
    }
    Serial.println("Image taken");
  }

  // Convert image to characteristics
  if (finger.image2Tz(1) != FINGERPRINT_OK) {
    Serial.println("Failed to create template");
    return;
  }

  Serial.println("Remove finger...");
  delay(2000);
  while (finger.getImage() != FINGERPRINT_NOFINGER) {
    delay(100);
  }

  Serial.println("Place same finger again...");
  p = -1;
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) {
      delay(100);
      continue;
    }
  }
  Serial.println("Image taken again");

  // Convert again
  if (finger.image2Tz(2) != FINGERPRINT_OK) {
    Serial.println("Failed to create template 2");
    return;
  }

  // Create model
  if (finger.createModel() != FINGERPRINT_OK) {
    Serial.println("Failed to create model");
    return;
  }

  // Store model
  uint8_t storeResult = finger.storeModel(id);
  if (storeResult == FINGERPRINT_OK) {
    Serial.println("Fingerprint stored successfully!");
    finger.getTemplateCount();
    Serial.print("Templates stored: ");
    Serial.println(finger.templateCount);
    if (Firebase.ready() && signupOK) {
    String userPath = "/fingerprint/Users/user" + String(id+1);
    Firebase.RTDB.setString(&fdbo, userPath + "/name", username);
    Firebase.RTDB.setInt(&fdbo, userPath + "/id", id);

    Serial.println("Saved user to Firebase:");
    Serial.print("Name: "); Serial.println(username);
    Serial.print("ID: "); Serial.println(id);
    id++;
    Firebase.RTDB.setInt(&fdbo, "/fingerprint/id", id);

    }


  } else {
    Serial.print("Failed to store fingerprint. Error code: ");
    Serial.println(storeResult);
  }
}

void searchFingerprint() {
  Serial.println("Place finger for searching...");
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) {
    Serial.println("Failed to capture image");
    return;
  }

  if (finger.image2Tz(1) != FINGERPRINT_OK) {
    Serial.println("Failed to convert image");
    return;
  }

  if (finger.fingerFastSearch() == FINGERPRINT_OK) {
    Serial.println("Fingerprint found!");
    Serial.print("Found ID: "); Serial.println(finger.fingerID);
    Serial.print("Confidence: "); Serial.println(finger.confidence);
  } else {
    Serial.println("No matching fingerprint found.");
  }
}

void readIDfromFirebase() {
  if (Firebase.ready() && signupOK) {
    if (Firebase.RTDB.getInt(&fdbo, "/fingerprint/id")) {
      id = fdbo.intData();
      Serial.print("Fetched ID from Firebase: ");
      Serial.println(id);
    } else {
      Serial.print("Failed to read ID, reason: ");
      Serial.println(fdbo.errorReason());
    }
  }
}

void passiveFingerprintScan() {
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) {
    return; // No finger detected
  }

  if (finger.image2Tz(1) != FINGERPRINT_OK) {
    Serial.println("Failed to convert image");
    return;
  }

  if (finger.fingerFastSearch() == FINGERPRINT_OK) {
    String payload = "{\"id\": " + String(finger.fingerID) + "}";
    client.publish("fingerprint/match", payload.c_str());
    Serial.println("Fingerprint Matched!");
    Serial.print("Matched ID: ");
    Serial.println(finger.fingerID);
    Serial.print("Confidence: ");
    Serial.println(finger.confidence);

  } else {
    Serial.println("No match");
  }
}







