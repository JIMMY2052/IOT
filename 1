https://iot-assignment-3fb92.firebaseio.com/
#include <Adafruit_Fingerprint.h>
#include <WiFi.h>
#include <PubSubClient.h>
#define WIFI_SSID "MyHaven"
#define WIFI_PASSWORD "myhaven1777"
const char* mqtt_server = "192.168.1.37";
WiFiClient espClient;
PubSubClient client(espClient);
HardwareSerial mySerial(2);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
uint8_t id = 1; // Start from ID 1, you can later auto-increment or ask user input
const char* mqtt_topic = "testjimmy/topic";

String mqtt_command = "";
bool serialUpdate = 0;
bool command_PowerOnOff = 0;
bool command_RegisterFinger = 0;
bool waitingForFingerprint = 0;

void setup_mqtt(){
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  reconnect();
  client.subscribe("testjimmy/topic");
  Serial.println("MQTT setup done");
}

void reconnect(){
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("", NULL, NULL)) {
      Serial.println("MQTT connected.");
      client.subscribe("testqwe/topic");
    } else {
      Serial.print("MQTT failed, rc=");
      Serial.print(client.state());
      Serial.println(" trying again in 2 seconds...");
      delay(2000);
    }
  }
}

void runFingerPrint(){
    if(command_PowerOnOff == 0){
            finger.LEDcontrol(false);
      }else if(command_PowerOnOff == 1){
              finger.LEDcontrol(true);
        }
}

void setup(){
  Serial.begin(115200);
  mySerial.begin(57600, SERIAL_8N1, 16, 17);
  finger.begin(57600);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.println("Connecting to WiFi...");
  }
  Serial.println("\nWiFi connected");
  setup_mqtt();
}

void enrollFingerprint() {
  int p = -1;
  Serial.print("Enrolling ID #"); Serial.println(id);

  Serial.println("Place finger on sensor...");
  while (p != FINGERPRINT_OK) {
    if (!waitingForFingerprint) {
      Serial.println("Enrollment cancelled by MQTT.");
      return;
    }

    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
    }
    delay(100);
  }

  if (finger.image2Tz(1) != FINGERPRINT_OK) {
    Serial.println("Error processing first image.");
    return;
  }

  Serial.println("Remove finger...");
  delay(2000);
  while (finger.getImage() != FINGERPRINT_NOFINGER) {
    if (!waitingForFingerprint) {
      Serial.println("Enrollment cancelled by MQTT.");
      return;
    }
  }

  Serial.println("Place same finger again...");
  p = -1;
  while (p != FINGERPRINT_OK) {
    if (!waitingForFingerprint) {
      Serial.println("Enrollment cancelled by MQTT.");
      return;
    }

    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
    }
    delay(100);
  }

  if (finger.image2Tz(2) != FINGERPRINT_OK) {
    Serial.println("Error processing second image.");
    return;
  }

  if (finger.createModel() != FINGERPRINT_OK) {
    Serial.println("Error creating model.");
    return;
  }

  if (finger.storeModel(id) == FINGERPRINT_OK) {
    Serial.println("Fingerprint registered successfully!");
    id++; // Increment ID for next registration
  } else {
    Serial.println("Error saving fingerprint.");
  }
}

void deleteFingerprint(uint8_t id) {
  uint8_t p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    Serial.print("Fingerprint ID ");
    Serial.print(id);
    Serial.println(" deleted successfully.");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location (maybe ID not found)");
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash memory");
  } else {
    Serial.println("Unknown error");
  }
}

void listFingerprints() {
  Serial.println("Listing enrolled fingerprints...");

  uint8_t totalTemplates = finger.getTemplateCount();
  Serial.print("Total templates: ");
  Serial.println(totalTemplates);

  if (totalTemplates == 0) {
    Serial.println("No fingerprints found.");
    return;
  }

  for (uint8_t id = 1; id < 200; id++) { // 1 to 199, depends on your sensor capacity
    uint8_t p = finger.loadModel(id);

    if (p == FINGERPRINT_OK) {
      Serial.print("Fingerprint ID #");
      Serial.println(id);
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
      return;
    }
    // If FINGERPRINT_NOTFOUND, do nothing (empty slot)
  }
}



void loop(){
  if (waitingForFingerprint == 1) {
    enrollFingerprint();
    waitingForFingerprint = 0;
  }
  runFingerPrint();
  client.loop();

}

void callback(char* topic, byte* message, unsigned int length){
  mqtt_command = "";
  serialUpdate = 0;
  for(int i = 0; i < length; i++){
    mqtt_command += (char)message[i];
  }

  if(mqtt_command == "on"){
    serialUpdate = 1;
    command_PowerOnOff = 1;
  }

  if(mqtt_command == "off"){
    serialUpdate = 1;
    command_PowerOnOff = 0;
  }

  if(mqtt_command == "reg"){
    serialUpdate = 1;
    waitingForFingerprint = 1;
    command_RegisterFinger = 1;
  }

  if (mqtt_command == "cancel") {
    serialUpdate = 1;
    waitingForFingerprint = 0; // Stop waiting
    command_RegisterFinger = 0; // Stop registering
  }

 if (mqtt_command.startsWith("delete_")) {
    serialUpdate = 1;
    int id_to_delete = mqtt_command.substring(7).toInt(); // Get number after "delete_"
    deleteFingerprint(id_to_delete);
  }

  if (mqtt_command == "list") {
    serialUpdate = 1;
    listFingerprints();
}


  if(serialUpdate == 1){
    Serial.print("MQTT command received: ");
    Serial.println(mqtt_command);
  }
}
