#include <Adafruit_Fingerprint.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define WIFI_SSID "B100M"
#define WIFI_PASSWORD "12345678"
#include <WiFiClientSecure.h>
#include <FirebaseClient.h>
#define Web_API_KEY "AIzaSyATRlhq87HHuKdWpkPlBgqANWfO4ErKZpw"
#define DATABASE_URL "https://iot-assignment-3fb92.firebaseio.com/"
#define USER_EMAIL "jimmychankahlok66@gmail.com"
#define USER_PASS "12345678"
#define API_KEY "AIzaSyATRlhq87HHuKdWpkPlBgqANWfO4ErKZpw"
#define DATABASE_URL "https://iot-assignment-3fb92.firebaseio.com/"
#define Buzzer 25
const char* mqtt_server = "192.168.1.30";
WiFiClient espClient;
PubSubClient client(espClient);
HardwareSerial mySerial(2);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
uint8_t id = 0;
uint8_t downloadTemplate[512];
const char* mqtt_topic = "fingerprint/poweronoff";
const char* mqtt_topic2 = "fingerprint/username";
const char* mqtt_topic3 = "fingerprint/delete";
String username = "";
String mqtt_command = "";
bool serialUpdate = 0;
bool update_power = 0;
bool command_PowerOnOff;
bool command_RegisterFinger = 0;
bool waitingForFingerprint = 0;
bool se = 0;
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64 
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
unsigned long lastMQTTAttempt = 0;
UserAuth user_auth(Web_API_KEY, USER_EMAIL, USER_PASS);
FirebaseApp app;
WiFiClientSecure ssl_client;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client);
RealtimeDatabase Database;

void setup(){
  Serial.begin(115200);
  mySerial.begin(57600, SERIAL_8N1, 16, 17);
  finger.begin(57600);
  pinMode(Buzzer, OUTPUT);

  if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("failed to start SSD1306 OLED"));
  }

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    oledDisplay("Connecting to WiFi");
    delay(100);
    if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected");
    oledDisplay("WiFi connected");
    } 
  }

  setup_mqtt();
  finger.LEDcontrol(true);
  ssl_client.setInsecure();
  ssl_client.setConnectionTimeout(1000);
  ssl_client.setHandshakeTimeout(5);
  initializeFirebase();
  while(!app.ready()){
    delay(100);
  }
  if (app.ready()){
    String power = "ON";
    Database.set<String>(aClient, "/fingerprint/Power", power, processData, "RealtimeDatabase_SetTask");
    command_PowerOnOff = 1;
  }
  oledDisplay("Please place your finger");
}

void initializeFirebase(){
  initializeApp(aClient, app, getAuth(user_auth), processData, "üîê authTask");
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);
}

void loop(){
  app.loop();
  if (!client.connected()) {
      reconnect();
  }

  if (waitingForFingerprint == 1) {
    enrollFingerprint();
    waitingForFingerprint = 0;
  }

  oledDisplay("Place your finger");

  if(update_power == 1){
    runFingerPrint();
    update_power = 0;
  }

  if (waitingForFingerprint == 0  && command_PowerOnOff == 1) {
    passiveFingerprintScan();
  }

  if (!app.ready()) {
    oledDisplay("Firebase not ready! Reinitializing...");
    initializeFirebase();
  }

  client.loop();
  ESP.getFreeHeap();
}

void callback(char* topic, byte* message, unsigned int length){
  mqtt_command = "";
  serialUpdate = 0;
  for(int i = 0; i < length; i++){
    mqtt_command += (char)message[i];
  }

  if (String(topic) == "fingerprint/username") {
  username = mqtt_command;
  Serial.print("Username received: ");
  Serial.println(username);
  serialUpdate = 1;
  waitingForFingerprint = 1;
  }


  if (String(topic) == "fingerprint/poweronoff") {
    if (mqtt_command == "ON") {
      update_power = 1;
      command_PowerOnOff = 1;
    } else if (mqtt_command == "OFF") {
      update_power = 1;
      command_PowerOnOff = 0;
    }
  }

  if (String(topic) == "fingerprint/delete") {
    int deleteId = mqtt_command.toInt();
    oled.clearDisplay();
    oled.setTextSize(1); 
    oled.setTextColor(WHITE);
    oled.setCursor(0, 2); 
    oled.println("Request to delete ID: " + String(deleteId));
    oled.display();
    delay(1000);

    if (finger.deleteModel(deleteId) == FINGERPRINT_OK) {
      oled.clearDisplay();
      oled.setTextSize(1); 
      oled.setTextColor(WHITE);
      oled.setCursor(0, 2); 
      oled.println("Fingerprint deleted successfully.");
      oled.println("Deleted ID: " + String(deleteId));
      oled.display();
      client.publish("fingerprint/deleteDBID", mqtt_command.c_str());
      delay(2000);
      digitalWrite(Buzzer, HIGH);
      delay(1000);
      digitalWrite(Buzzer, LOW);
    } else {
      oledDisplay("Delete Failed ID: " + String(deleteId));
    }
  }

  if(serialUpdate == 1){
    Serial.print("MQTT command received: ");
    Serial.println(mqtt_command);
  }
}

void setup_mqtt(){
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  reconnect();
  client.subscribe(mqtt_topic);
  client.subscribe(mqtt_topic2);
  client.subscribe(mqtt_topic3);
  Serial.println("MQTT setup done");
}

void reconnect(){
  while (!client.connected()) {
    oledDisplay("Attempting MQTT connection...");
    Serial.println("Attempting MQTT connection...");
    if (client.connect("", NULL, NULL)) {
      oledDisplay("MQTT connected.");
      Serial.println("MQTT connected.");
    } else {
      oledDisplay("MQTT failed to Connect.");
      Serial.print("MQTT failed, rc=");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void runFingerPrint(){
  if(command_PowerOnOff == 0){
    finger.LEDcontrol(false);
    oled.ssd1306_command(SSD1306_DISPLAYOFF);
    String power = "OFF";
    if (app.ready()){ 
    Database.set<String>(aClient, "/fingerprint/Power", power, processData, "RealtimeDatabase_SetTask");
    }
  }else if(command_PowerOnOff == 1){
    finger.LEDcontrol(true);
    String power = "ON";
    if (app.ready()){ 
    Database.set<String>(aClient, "/fingerprint/Power", power, processData, "RealtimeDatabase_SetTask");
    }
  }
}

void enrollFingerprint() {
  int p = -1;
  readIDfromFirebase();
  oled.clearDisplay();
  oled.setTextSize(1); 
  oled.setTextColor(WHITE);
  oled.setCursor(0, 2); 
  oled.println("Place your finger on the sensor");
  oled.print("Enrolling ID #"); 
  oled.println(id);
  oled.display();
  client.loop();

  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) {
      delay(100);
      continue;
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {

      Serial.println("Communication error");
      continue;
    } else if (p != FINGERPRINT_OK) {
      Serial.println("Unknown error");
      continue;
    }
    oledDisplay("Image taken");
  }

  if (finger.image2Tz(1) != FINGERPRINT_OK) {
    oledDisplay("Failed to create template");
    delay(1000);
    return;
  }

  oledDisplay("Remove finger");
  delay(2000);
  while (finger.getImage() != FINGERPRINT_NOFINGER) {
    delay(100);
  }

  oledDisplay("Place same finger again");
  p = -1;
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    if (p == FINGERPRINT_NOFINGER) {
      delay(100);
      continue;
    }
  }
  Serial.println("Image taken again");

  // Convert again
  if (finger.image2Tz(2) != FINGERPRINT_OK) {
    Serial.println("Failed to create template 2");
    return;
  }

  // Create model
  if (finger.createModel() != FINGERPRINT_OK) {
    oledDisplay("Fingerprint Not Same with Previous");
    Serial.println("Failed to create model");
    delay(1000);
    return;
  }

  // Store model
  uint8_t storeResult = finger.storeModel(id);
  if (storeResult == FINGERPRINT_OK) {
    oledDisplay("Fingerprint stored successfully!");
    finger.getTemplateCount();
    Serial.print("Templates stored: ");
    Serial.println(finger.templateCount);
    if (app.ready()){
    String userPath = "/fingerprint/Users/user" + String(id+1);
    Database.set<String>(aClient,  userPath + "/name", username, processData, "RTDB_Send_String");
    Database.set<int>(aClient, userPath + "/id", id, processData, "RTDB_Send_Int");
    oled.clearDisplay();
    oled.setTextSize(1); 
    oled.setTextColor(WHITE);
    oled.setCursor(0, 2); 
    oled.println("Saved user to Firebase:");
    oled.print("Name: ");
    oled.println(username);
    oled.print("ID: "); 
    oled.println(id);
    oled.display();
    delay(1000);
    id++;
    Database.set<int>(aClient, "/fingerprint/id", id, processData, "RTDB_Send_Int");
    delay(500);
    client.publish("fingerprint/add","1");
    }
  } else {
    oledDisplay("Failed to store fingerprint.");
    delay(1000);
  }
  
}


void readIDfromFirebase() {
  if (app.ready()){ 
    id = Database.get<int>(aClient, "/fingerprint/id");
    Serial.print("Fetched ID from Firebase: ");
    Serial.println(id);
  }
}

void passiveFingerprintScan() {
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) {
    return;
  }

  if (finger.image2Tz(1) != FINGERPRINT_OK) {
    oledDisplay("Failed to convert image");
    delay(1000);
    return;
  }

  if (finger.fingerFastSearch() == FINGERPRINT_OK) {
    Database.set<int>(aClient, "/Door/Status", 0, processData, "RTDB_Send_Int");
    digitalWrite(Buzzer, HIGH);
    oled.clearDisplay();
    oled.setTextSize(1); 
    oled.setTextColor(WHITE);
    oled.setCursor(0, 2); 
    oled.println("Fingerprint Matched!");
    oled.print("Matched ID: ");
    oled.println(finger.fingerID);
    oled.display(); 
    delay(1000);
    digitalWrite(Buzzer, LOW);
    oledDisplay("Welcome Back");
    delay(1000);
    String payload = "{\"id\": " + String(finger.fingerID) + "}";
    client.publish("fingerprint/match", payload.c_str());
    while (finger.getImage() != FINGERPRINT_NOFINGER) {
      delay(100);
    }

  } else {
      oled.clearDisplay();
      oled.setTextSize(1); 
      oled.setTextColor(WHITE);
      oled.setCursor(0, 2); 
      oled.println("Fingerprint Not match");
      oled.println("Try Again..");
      oled.display(); 
      delay(1000);
      Serial.println("No match");
      while (finger.getImage() != FINGERPRINT_NOFINGER) {
      delay(100);
      }
  }
}

void oledDisplay(String msg){
  oled.clearDisplay();
  oled.setTextSize(1); 
  oled.setTextColor(WHITE);
  oled.setCursor(0, 2); 
  oled.println(msg);
  oled.display(); 
}

void processData(AsyncResult &aResult) {
  if (!aResult.isResult())
    return;

  if (aResult.isEvent())
    Firebase.printf("Event task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.eventLog().message().c_str(), aResult.eventLog().code());

  if (aResult.isDebug())
    Firebase.printf("Debug task: %s, msg: %s\n", aResult.uid().c_str(), aResult.debug().c_str());

  if (aResult.isError())
    Firebase.printf("Error task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.error().message().c_str(), aResult.error().code());

  if (aResult.available())
    Firebase.printf("task: %s, payload: %s\n", aResult.uid().c_str(), aResult.c_str());
}





